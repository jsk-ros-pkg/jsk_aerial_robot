<?xml version="1.0" encoding="utf-8"?>
<launch>
  ###########  launch config  ###########
  <arg name="real_machine" default="True" />
  <arg name="simulation" default="False" />
  <arg name="estimate_mode"  default= "1" />
  <arg name="sim_estimate_mode"  default= "2" />
  <arg name="headless" default="True" />
  <arg name="worldtype" default="real" />
  <arg name="launch_gazebo" default="True" />
  <arg name="direct_model" default="False" />
  <arg name="direct_model_name" />
  <arg name="spawn_x" default="0.0"/>
  <arg name="spawn_y" default="0.0"/>
  <arg name="spawn_z" default="0.0"/>
  <!-- shift of obstacle position -->
  <arg name="shift_x" default="0.0"/> 
  <arg name="shift_y" default="0.0"/>
  <arg name="spawn_yaw" default="0.0"/>
  <arg name="robot_id" default="" />
  <arg name="airframe" default="quadrotor" />
  <arg name="robot_ns" value="multirotor$(arg robot_id)" />
  <arg name="config_dir" default="$(find agile_multirotor)/config/" />
  <arg name="hokuyo" default="False" />

  ###########  Parameters  ###########
  <group ns="$(arg robot_ns)">

    ###########  Basic Param  ###########
    # EGOMOTION_ESTIMATE = 0
    # EXPERIMENT_ESTIMATE = 1. for unstable mocap, use this mode
    # GROUND_TRUTH = 2
    <param name="estimation/mode" value= "$(arg sim_estimate_mode)" if="$(arg simulation)" />
    <param name="estimation/mode" value= "$(arg estimate_mode)" if="$(arg real_machine)"/>

    # Drone = 0
    <param name="uav_model" value= "0" />
    <rosparam file="$(arg config_dir)/RobotModelUnderActuated.yaml" command="load" />

    ###########  Motor Config  ###########
    <rosparam file="$(arg config_dir)/MotorInfo_F35.yaml" command="load" />

    ###########  Battery Config  ###########
    <rosparam file="$(arg config_dir)/Battery.yaml" command="load" />

    ###########  Control  ###########
    <rosparam file="$(arg config_dir)/FlightControlUnderActuated.yaml" command="load" />
    ###########  Sensor Fusion  ###########
    <rosparam file="$(arg config_dir)/StateEstimation.yaml" command="load" />
    <rosparam file="$(arg config_dir)/Simulation.yaml" command="load" if="$(eval arg('simulation') and not arg('real_machine'))"/>

    ###########  Navigation  ###########
    <rosparam file="$(arg config_dir)/NavigationConfig.yaml" command="load" />
  </group>

  ###########  Base Platform  ###########
  <node pkg="aerial_robot_base" type="aerial_robot_base_node" name="aerial_robot_base_node" ns="$(arg robot_ns)" output="screen" >
    <param name="tf_prefix" value="$(arg robot_ns)"/>
    <param name="param_verbose" value="false"/>
    <param name="main_rate" value="40"/>
  </node>

  ###########  Robot Model  ###########
  <arg name="description_mode" value="urdf" unless="$(arg simulation)" />
  <arg name="description_mode" value="gazebo" if="$(arg simulation)" />
  <include file="$(find aerial_robot_model)/launch/aerial_robot_model.launch" >
    <arg name="headless" value="$(arg headless)" />
    <arg name="robot_model" value="$(find agile_multirotor)/urdf/$(arg airframe).$(arg description_mode).xacro"/>
    <arg name="robot_model" value="$(arg direct_model_name)" if="$(arg direct_model)"/>
    <arg name="robot_ns" value="$(arg robot_ns)"/>
    <arg name="rviz_config" value="$(find agile_multirotor)/config/rviz_config" />
    <arg name="rviz_init_pose" value="$(arg config_dir)/RvizInit.yaml" />
    <arg name="need_joint_state" value="false" if ="$(eval arg('simulation') or arg('real_machine'))"/>
  </include>

  ###########  Sensors ###########
  <include file="$(find agile_multirotor)/launch/includes/sensors.launch.xml" >
    <arg name="real_machine" value="$(arg real_machine)" />
    <arg name="simulation" value="$(arg simulation)" />
    <arg name="robot_ns" value="$(arg robot_ns)" />
  </include >

  ########## Simulation in Gazebo #########
  <include file="$(find aerial_robot_simulation)/launch/simulation.launch" if = "$(eval arg('simulation') and not arg('real_machine'))" >
    <arg name="robot_ns" default="$(arg robot_ns)" />
    <arg name="gui" default="false" if="$(arg headless)" />
    <arg name="headless" default="$(arg headless)" />
    <arg name="launch_gazebo" default="$(arg launch_gazebo)" />
    <arg name="spawn_x" value="$(arg spawn_x)" />
    <arg name="spawn_y" value="$(arg spawn_y)" />
    <arg name="spawn_z" value="$(arg spawn_z)" />
    <arg name="spawn_yaw" value="$(arg spawn_yaw)" />
  </include>

  ######## work around to evoke robot model update #######
  <node pkg="agile_multirotor" type="joint_state_pub.py" name="joint_state_pub" ns="$(arg robot_ns)"/>

  ####### Simulation collision world ############
  <group if= "$(eval arg('simulation') and not arg('real_machine'))">
    <node pkg="agile_multirotor" type="obstacle_world.py" name="obstacle_world" output="screen" ns="$(arg robot_ns)">
      <param name="rate" value="20.0" />
      <param name="obstacle_world_file" value="$(find agile_multirotor)/config/obstacle_world/$(arg worldtype).csv" />
      <param name="shift_x" value="$(arg shift_x)" />
      <param name="shift_y" value="$(arg shift_y)" />
    </node>

    <node pkg="agile_multirotor" type="depth_image_correction.py" name="depth_image_correction" output="screen" ns="$(arg robot_ns)"/> 
  </group>

  ####### Polar Pixel calculation  ############

  <node pkg="agile_multirotor" type="observation_conversion_node" name="observation_conversion" output="screen" ns="$(arg robot_ns)">
    <param name="cfg_path" value="$(find agile_multirotor)/config/obstacle_world/$(arg worldtype).csv" />
    <param name="shift_x" type="double" value="$(arg shift_x)" />
    <param name="shift_y" type="double" value="$(arg shift_y)" />
  </node>

  <!-- <node pkg="agile_multirotor" type="policy_navigator.py" name="policy_navigator" output="screen" ns="$(arg robot_ns)" launch-prefix="xterm -fn 10x20 -e python -m pdb">
    <param name="ppo_path" value="$(find agile_multirotor)/linvel_policy" />
  </node> -->

  ####### HOKUYO sensor launch  ############
  <group if= "$(eval not arg('simulation') and arg('real_machine') and arg('hokuyo'))">
  <include file="$(find agile_multirotor)/launch/urg_node.launch" >
   </include>
   </group>

</launch>
