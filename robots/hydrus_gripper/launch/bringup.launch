<?xml version="1.0"?>
<launch>
  ###########  launch config  ###########
  <arg name="rm" default="True" />
  <arg name="sim" default="False" />
  <arg name="real_machine" default="$(arg rm)" />
  <arg name="simulation" default="$(arg sim)" />
  <arg name="estimate_mode"  default= "1" />
  <arg name="sim_estimate_mode"  default= "2" />
  <arg name="config_path" value="$(find hydrus_gripper)/config/"/>
  <arg name="robot_id" default="" />
  <arg name="robot_ns" value="hydrus$(arg robot_id)" />
  <arg name="launch_gazebo" default="True" />
  <arg name="headless" default="True" />
  <arg name="worldtype" default="$(find aerial_robot_simulation)/gazebo_model/world/empty.world" />
  <arg name="spawn_x" default="0.0"/>
  <arg name="spawn_y" default="0.0"/>
  <arg name="spawn_z" default="0.0"/>
  <arg name="spawn_yaw" default="0.0"/>
  <arg name="hokuyo" default="False" />

  <arg name="battery_type" default="True"/>
  <arg name="rs_d435" default="False"/>

  <arg name="tree" default="real_RP_254_v0.1.1" />
  <arg name="tree_movement" default="static" />
  <arg name="policy_start_delay" default="1.0" />

  <arg name="shift_x" default="0.0"/>
  <arg name="shift_y" default="0.0"/>
  <arg name="body_r" default="0.55" />

  ###########  Parameters  ###########
  <group ns="$(arg robot_ns)">

    ###########  Basic Param  ###########
    # EGOMOTION_ESTIMATE = 0
    # EXPERIMENT_ESTIMATE = 1. for unstable mocap, use this mode
    # GROUND_TRUTH = 2
    <param name="estimation/mode" value= "$(arg sim_estimate_mode)" if="$(arg simulation)" />
    <param name="estimation/mode" value= "$(arg estimate_mode)" if="$(arg real_machine)"/>

    <param name="uav_model" value= "16" />
    <rosparam file="$(arg config_path)/RobotModel.yaml" command="load" />

    ###########  Motor Config  ###########
    <rosparam file="$(find hydrus_gripper)/config/MotorInfo.yaml" command="load" />

    ###########  Servo Config  ###########
    <rosparam file="$(find hydrus_gripper)/config/Servo.yaml" command="load" />

    ###########  Battery Config  ###########
    <rosparam file="$(arg config_path)/Battery.yaml" command="load" />

    ###########  Control  ###########
    <rosparam file="$(arg config_path)/FlightControl.yaml" command="load" />

    ###########  Sensor Fusion  ###########
    <rosparam file="$(arg config_path)/StateEstimation.yaml" command="load" />
    <rosparam file="$(find hydrus_gripper)/config/Simulation.yaml" command="load" if="$(arg simulation)"/>

    ###########  Teleop  ###########
    <rosparam file="$(arg config_path)/TeleopNavigationConfig.yaml" command="load" />
  </group>

  ###########  Base Platform  ###########
  <node pkg="aerial_robot_base" type="aerial_robot_base_node" name="aerial_robot_base_node" ns="$(arg robot_ns)"  output="screen" >
    <param name="tf_prefix" value="$(arg robot_ns)"/>
    <param name="param_verbose" value="false"/>
    <param name="main_rate" type="double" value="40" />
  </node>

  ###########  Robot Model  ###########
  <arg name="description_mode" value="urdf" unless="$(arg simulation)" />
  <arg name="description_mode" value="gazebo" if="$(arg simulation)" />
  <include file="$(find aerial_robot_model)/launch/aerial_robot_model.launch" >
    <arg name="headless" value="$(arg headless)" />
    <arg name="robot_model" value="$(find hydrus_gripper)/robots/robot.$(arg description_mode).xacro"/>
    <arg name="robot_ns" value="$(arg robot_ns)" />
    <arg name="model_options" value="default_battery:=$(arg battery_type)" />
    <arg name="rviz_config" value="$(find hydrus)/config/rviz_config" />
    <arg name="rviz_init_pose" value="$(find hydrus_gripper)/config/RvizInit.yaml" />
    <arg name="need_joint_state" value="false" if ="$(eval arg('simulation') or arg('real_machine'))"/>
  </include>

  ###########  Sensors  ###########
  <include file="$(find hydrus_gripper)/launch/sensors.launch" >
    <arg name="real_machine" value="$(arg real_machine)" />
    <arg name="simulation" value="$(arg simulation)" />
    <arg name="robot_ns" value="$(arg robot_ns)" />
  </include>

  ###########  Servo Bridge  ###########
  <node pkg="aerial_robot_model" type="servo_bridge_node" name="servo_bridge"  output="screen"  ns="$(arg robot_ns)" />

  ########## Simulation in Gazebo #########
  <include file="$(find aerial_robot_simulation)/launch/simulation.launch" if = "$(eval arg('simulation') and not arg('real_machine'))" >
    <arg name="robot_ns" default="$(arg robot_ns)" />
    <arg name="gui" default="false" if="$(arg headless)" />
    <arg name="headless" default="$(arg headless)" />
    <arg name="launch_gazebo" default="$(arg launch_gazebo)" />
    <arg name="worldtype" value="$(arg worldtype)" />
    <arg name="spawn_x" value="$(arg spawn_x)" />
    <arg name="spawn_y" value="$(arg spawn_y)" />
    <arg name="spawn_z" value="$(arg spawn_z)" />
    <arg name="spawn_yaw" value="$(arg spawn_yaw)" />
  </include>

  ########## servo for realsense d435  ########
  <group if="$(arg rs_d435)">
    <node pkg="nodelet" type="nodelet" name="realsense2_camera_manager" args="manager 2>/dev/null" output="log" ns="$(arg robot_ns)/rs_d435"/>
    <node pkg="timed_roslaunch" type="timed_roslaunch.sh"
          args="3 realsense2_camera rs_rgbd.launch camera:=rs_d435 tf_prefix:=$(arg robot_ns)/rs_d435 publish_tf:=false external_manager:=true manager:=realsense2_camera_manager color_fps:=15 infra_fps:=15 depth_fps:=15 color_width:=640 color_height:=480 depth_width:=640 depth_height:=480" name="timed_roslaunch" output="log" ns="$(arg robot_ns)"  if="$(arg real_machine)"/>
  </group>

  ####### Simulation collision world ############
  <group if= "$(eval arg('simulation') and not arg('real_machine'))">
    <node pkg="agile_multirotor" type="obstacle_world.py" name="obstacle_world" output="screen" ns="$(arg robot_ns)">
      <param name="rate" value="20.0" />
      <param name="obstacle_world_file" value="$(find agile_multirotor)/config/obstacle_world/$(arg tree_movement)/hydrus/$(arg tree).csv" />
      <param name="shift_x" value="$(arg shift_x)" />
      <param name="shift_y" value="$(arg shift_y)" />
      <param name="policy_start_delay" value="$(arg policy_start_delay)" />
    </node>
  </group>

  ####### Polar Pixel calculation  ############
  <node pkg="agile_multirotor" type="common_observation_conversion_node" name="common_observation_conversion" output="screen" ns="$(arg robot_ns)">
    <param name="cfg_path" value="$(find agile_multirotor)/config/obstacle_world/$(arg tree_movement)/hydrus/$(arg tree).csv" />
    <param name="hokuyo" type="bool" value="$(arg hokuyo)"/>
    <param name="shift_x" type="double" value="$(arg shift_x)" />
    <param name="shift_y" type="double" value="$(arg shift_y)" />
    <param name="robot_ns" value="$(arg robot_ns)"/>
    <param name="body_r" type="double" value="$(arg body_r)" />
    <param name="vel_calc_boundary" type="double" value="0.30" />
    <param name="print_yaw" type="bool" value="false" />
  </node>

  ####### HOKUYO sensor launch  ############
  <!-- real exec to use hokuyo sensor  -->
  <include file="$(find hokuyo_estimation)/launch/bringup.launch" if= "$(arg hokuyo)">
    <arg name="real_machine" value="$(arg real_machine)" />
    <arg name="simulation" value="$(arg simulation)" />
    <arg name="robot_ns" value="$(arg robot_ns)" />
  </include>

</launch>
