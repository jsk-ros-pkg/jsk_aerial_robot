/**
******************************************************************************
* @file      LinkerScript.ld
* @author    Auto-generated by STM32CubeIDE
* @brief     Linker script for STM32H743VITx Device from STM32H7 series
*                      2048Kbytes FLASH
*                      128Kbytes DTCMRAM
*                      64Kbytes ITCMRAM
*                      512Kbytes RAM_D1
*                      288Kbytes RAM_D2
*                      64Kbytes RAM_D3
*
*            Set heap size, stack size and stack location according
*            to application requirements.
*
*            Set memory bank area and size if external memory is used
******************************************************************************
* @attention
*
* <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
* All rights reserved.</center></h2>
*
* This software component is licensed by ST under BSD 3-Clause license,
* the "License"; You may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*                        opensource.org/licenses/BSD-3-Clause
*
******************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = ORIGIN(RAM_D1) + LENGTH(RAM_D1); /* end of "RAM_D1" Ram type memory */

_Min_Heap_Size = 0x2000 ;	/* required amount of heap  */
_Min_Stack_Size = 0x4000 ;	/* required amount of stack */

/* Memories definition */
MEMORY
{
DTCMRAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 128K
ITCMRAM    (xrw)    : ORIGIN = 0x00000000,   LENGTH = 64K
RAM_D1    (xrw)    : ORIGIN = 0x24000000,   LENGTH = 512K
RAM_D2    (xrw)    : ORIGIN = 0x30000000,   LENGTH = 288K
RAM_D3    (xrw)    : ORIGIN = 0x38000000,   LENGTH = 64K
FLASH    (rx)    : ORIGIN = 0x8000000,   LENGTH = 1920K /* 2048 - 128 = 1920  */
DATA     (rx)    : ORIGIN = 0x081E0000, LENGTH = 128K
}

/* Sections */
SECTIONS
{
/* The startup code into "FLASH" Rom type memory */
.isr_vector :
{
. = ALIGN(4);
KEEP(*(.isr_vector)) /* Startup code */
. = ALIGN(4);
} >FLASH

/* The program code and other data into "FLASH" Rom type memory */
.text :
{
. = ALIGN(4);
*(.text)           /* .text sections (code) */
*(.text*)          /* .text* sections (code) */
*(.glue_7)         /* glue arm to thumb code */
*(.glue_7t)        /* glue thumb to arm code */
*(.eh_frame)

KEEP (*(.init))
KEEP (*(.fini))

. = ALIGN(4);
_etext = .;        /* define a global symbols at end of code */
} >FLASH

/* Constant data into "FLASH" Rom type memory */
.rodata :
{
. = ALIGN(4);
*(.rodata)         /* .rodata sections (constants, strings, etc.) */
*(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
. = ALIGN(4);
} >FLASH

.ARM.extab   : {
. = ALIGN(4);
*(.ARM.extab* .gnu.linkonce.armextab.*)
. = ALIGN(4);
} >FLASH

.ARM : {
. = ALIGN(4);
__exidx_start = .;
*(.ARM.exidx*)
__exidx_end = .;
. = ALIGN(4);
} >FLASH

.preinit_array     :
{
. = ALIGN(4);
PROVIDE_HIDDEN (__preinit_array_start = .);
KEEP (*(.preinit_array*))
PROVIDE_HIDDEN (__preinit_array_end = .);
. = ALIGN(4);
} >FLASH

.init_array :
{
. = ALIGN(4);
PROVIDE_HIDDEN (__init_array_start = .);
KEEP (*(SORT(.init_array.*)))
KEEP (*(.init_array*))
PROVIDE_HIDDEN (__init_array_end = .);
. = ALIGN(4);
} >FLASH

.fini_array :
{
. = ALIGN(4);
PROVIDE_HIDDEN (__fini_array_start = .);
KEEP (*(SORT(.fini_array.*)))
KEEP (*(.fini_array*))
PROVIDE_HIDDEN (__fini_array_end = .);
. = ALIGN(4);
} >FLASH

/* Used by the startup to initialize data */
_sidata = LOADADDR(.data);

/* Initialized data sections into "RAM_D1" Ram type memory */
.data :
{
. = ALIGN(4);
_sdata = .;        /* create a global symbol at data start */
*(.data)           /* .data sections */
*(.data*)          /* .data* sections */

. = ALIGN(4);
_edata = .;        /* define a global symbol at data end */

} >RAM_D1 AT> FLASH

/* Uninitialized data section into "RAM_D1" Ram type memory */
. = ALIGN(4);
.bss :
{
/* This is used by the startup in order to initialize the .bss section */
_sbss = .;         /* define a global symbol at bss start */
__bss_start__ = _sbss;
*(.bss)
*(.bss*)
*(COMMON)

. = ALIGN(4);
_ebss = .;         /* define a global symbol at bss end */
__bss_end__ = _ebss;
} >RAM_D1

/* User_heap_stack section, used to check that there is enough "RAM_D1" Ram  type memory left */
/* ._user_heap_stack : */
/* { */
/*   . = ALIGN(8); */
/*   PROVIDE ( end = . ); */
/*   PROVIDE ( _end = . ); */
/*   . = . + _Min_Heap_Size; */
/*   . = . + _Min_Stack_Size; */
  /*   . = ALIGN(8); */
  /* } >RAM_D1 */
._user_heap_stack :
{
. = ALIGN(4);
PROVIDE ( end = . );
PROVIDE ( _end = . );
. = . + _Min_Heap_Size;
. = . + _Min_Stack_Size;
. = ALIGN(4);
} >DTCMRAM

.uart_sec (NOLOAD) : {
. = ABSOLUTE(0x24040000);
*(.UartRxBufferSection)
. = ABSOLUTE(0x24040400);
*(.UartTxBufferSection)
. = ABSOLUTE(0x24044400);
*(.GpsRxBufferSection)
. = ABSOLUTE(0x24044800);
*(.ServoRxBufferSection)
. = ABSOLUTE(0x24044C00);
*(.EscRxBufferSection)
. = ABSOLUTE(0x24045000);
*(.DShotBufferSection1)
. = ABSOLUTE(0x24045080);
*(.DShotBufferSection2)
. = ABSOLUTE(0x24045100);
*(.DShotBufferSection3)
. = ABSOLUTE(0x24045180);
*(.DShotBufferSection4)
} >RAM_D1 AT> FLASH



/* the MPU and memory setting for LWIP Ethernet */
/* https://community.st.com/s/article/FAQ-Ethernet-not-working-on-STM32H7x3 */

/* 256 bytes at 0x30040000 configured as Shared Device, MPU region 2 (required for overlapping) */
/* This is for RX and TX DMA descriptors */
/* 16 kb at 0x30044000 configured as write-through, MPU region 1 */
/* This is for TX buffers allocated by LwIP */
/* 16 kb at 0x30040000 configured as non-cacheable, MPU region 0 (required for overlapping) */
/* This is for RX buffer used by the Ethernet driver */

.lwip_sec (NOLOAD) : {
. = ABSOLUTE(0x30040000);
*(.RxDecripSection) 

. = ABSOLUTE(0x30040060);
*(.TxDecripSection)

. = ABSOLUTE(0x30040200);
*(.RxArraySection) 
} >RAM_D2 AT> FLASH


  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
